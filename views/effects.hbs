{{> header }}
<header>
    <a href="/"><img src="/images/theresas-sound-world.png"/></a>
    <h1>Theresa's Sound World is a way of processing audio and making music using JavaScript</h1>
    {{> menu }}
</header>
<div role="main" class="main">
    <h2>Effects</h2>
    <p>Start the song, the play with the effects below to hear the results.</p>
    <button name="start-song" disabled>Start song</button>
    <hr/>

    <div class="effect delay">
        <h3>Delay</h3>
        <label for="delay-delay-time"/>Delay time</label>
        <input name="delay-delay-time" type="range" min="0" max="1" step="0.1"/>

        <label for="delay-feedback"/>Feedback</label>
        <input name="delay-feedback" type="range" min="0" max="1" step="0.1"/>

        <label for="delay-effect-level"/>Effect Level</label>
        <input name="delay-effect-level" type="range" min="0" max="1" step="0.1"/>
    </div>
    <div class="effect distortion">
        <h3>Distortion</h3>
        <label for="distortion-effect-level"/>Effect Level</label>
        <input name="distortion-effect-level" type="range" min="0" max="1" step="0.1"/>
    </div>
    <div class="effect phaser">
        <h3>Phaser</h3>
        <label for="phaser-cutoff-level"/>Cutoff Level</label>
        <input name="phaser-cutoff-level" type="range" min="0" max="1000" step="10"/>
    </div>
    <div class="effect reverb">
        <h3>Reverb</h3>
        <label for="reverb-time">Reverb time</label>
        <input name="reverb-time" type="range" min="0" max="1" step="0.1"/>

        <label for="reverb-effect-level"/>Effect Level</label>
        <input name="reverb-effect-level" type="range" min="0" max="1" step="0.1"/>
    </div>
    <div class="effect tremolo">
        <h3>Tremolo</h3>
        <label for="tremolo-rate"/>Rate</label>
        <input name="tremolo-rate" type="range" min="0" max="20" step="1"/>
        <label for="tremolo-depth"/>Depth</label>
        <input name="tremolo-depth" type="range" min="0" max="1" step="0.1"/>
    </div>
    <div class="clearer"></div>
</div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script src="instruments/drum-machine/drum-machine.js"></script>
<script src="instruments/synth/synth.js"></script>
<script src="tsw-core.js"></script>
<script src="tsw-music.js"></script>
<script src="tsw-sequencer.js"></script>
<script src="tsw-effects.js"></script>
<script src="songs/song.js"></script>
<script>
    // Create context and nodes
    var context = new webkitAudioContext(),
        output = context.destination,
        volume = context.createGain(),
        mySoundWorld = new SoundWorld(context),
        delay = mySoundWorld.createDelay({delayTime: 0.1}),
        reverb = mySoundWorld.createReverb(),
        phaser = mySoundWorld.createPhaser(),
        lfo = mySoundWorld.createLFO(),
        tremolo = mySoundWorld.createTremolo();

    // Play short sound
    var playNote = function () {
        var osc = mySoundWorld.createSquareWave();

        osc.connect(delay.input);
        delay.connect(reverb.input);
        reverb.connect(tremolo.input);

        volume.gain.value = 0.2;

        tremolo.connect(volume);
        volume.connect(context.destination);

        osc.start(context.currentTime);
    };

    var guitar;

    mySoundWorld.load({'guitar': '/audio/guitar.ogg'}, function (buffers) {
        guitar = buffers.guitar;
    });

    var playFile = function () {
        guitar.connect(phaser.input);
        phaser.connect(mySoundWorld.speakers);
        guitar.play();
    };

    var startSong = function () {
        //console.log(sequencer)
    };

    // Slider event listeners *
    $('input').change(function () {
        switch ($(this).attr('name')) {
            case 'delay-delay-time':
                delay.setDelayTime($(this).val());
                break;
            case 'delay-feedback':
                delay.setFeedback(this.value);
                break;
            case 'delay-effect-level':
                delay.setEffectLevel(this.value);
                break;
            case 'reverb-effect-level':
                delay.setEffectLevel(this.value);
                break;
            case 'phaser-cutoff-level':
                phaser.setCutoff(this.value);
                break;
            case 'tremolo-rate':
                tremolo.setRate(this.value);
                break;
            case 'tremolo-depth':
                tremolo.setDepth(this.value);
                break;
            default:
                break;
        };
    });

    // Button event listeners
    $('button').click(function () {
        switch ($(this).attr('name')) {
            case 'play-note':
                playNote();
                break;
            case 'play-file':
                playFile();
                break;
            case 'start-song':
                sequencer.startSong();
                break;
            default:
                break;
        }
    });
</script>
{{> footer }}
